import telethon.tl.types
from aiogram import Bot, types
from keyboards import get_keyboard
from base import user_get, user_post,get_agents, add_channels
from aiogram import executor
from api import dp, bot
from callbaks import handle_callback
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup




class BotMain:
    def __init__(self, bot: Bot):
        self.bot = bot
        dp.register_message_handler(self.start, commands=['start', 'help', 'admin', 'add_channels'])
        dp.register_callback_query_handler(self.callback, lambda c: c.data in ['categories', 'back', '–û–±–º–µ–Ω –≤–∞–ª—é—Ç', 'WEB-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'MARKETPLACES','direct', 'free','subscribe','7', '14', '30', '90', '180'])



    async def start(self, message: types.Message):
        if message.text == '/start':
            first_name = message.from_user.first_name
            user_name = message.from_user.username
            user_id = message.from_user.id
            print(user_id,'flfd;s')
            look_user_get = await user_get(user_id)
            # print(look_user_get)

            data = {
                    "first_name": first_name,
                    "user_name": user_name,
                    "user_id": user_id,
                    "is_admin": False,
                    "is_bot": False
                    }
            if look_user_get :
                res = await user_post(data)
                text = '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ PRO LEAD! –ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏ ü§ó

–í —ç—Ç–æ–º –±–æ—Ç–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è —Ç–µ–±—è –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ—Ç–Ω–∏ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–æ–≤ –≤ Telegram –∏ –∏—â–µ–º –ª—é–¥–µ–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö: –≤–Ω–∂, –æ–±–º–µ–Ω –≤–∞–ª—é—Ç, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, –¥–∏–∑–∞–π–Ω –∏ —Ç.–¥.

üìç–í —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–æ–∫¬ª —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–µ –≤ –¥–µ–ª–µ.

üìç–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞¬ª, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.'''
                if res:
                    await message.answer(text=text, reply_markup=get_keyboard('start'))
                else:
                    await message.answer(text=text, reply_markup=get_keyboard('start'))
            else:
                res = await user_post(data)
                await message.answer('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ PRO LEAD! –ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏ ü§ó

–í —ç—Ç–æ–º –±–æ—Ç–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è —Ç–µ–±—è –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ—Ç–Ω–∏ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–æ–≤ –≤ Telegram –∏ –∏—â–µ–º –ª—é–¥–µ–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö: –≤–Ω–∂, –æ–±–º–µ–Ω –≤–∞–ª—é—Ç, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, –¥–∏–∑–∞–π–Ω –∏ —Ç.–¥.

üìç–í —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–æ–∫¬ª —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–µ –≤ –¥–µ–ª–µ.

üìç–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞¬ª, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.''', reply_markup=get_keyboard('start'))

        elif message.text == '/admin':
            user_admin = message.from_user.id
            look_user_admin = await user_get(user_admin)
            if look_user_admin[0]['is_admin'] == True:
                await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_channels')  

            else:
                await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=get_keyboard('start'))
        elif message.text == '/add_channels':
            user_admin = message.from_user.id
            look_user_admin = await user_get(user_admin)
            if look_user_admin[0]['is_admin'] == True:                   

                class Channels(StatesGroup):
                    add_channels = State()


                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É')
                await Channels.add_channels.set()

                @dp.message_handler(state=Channels.add_channels)
                async def add_channel(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['add_channels'] = message.text
                       

                        await add_channels(message.text)
                        await message.answer('–í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—ã...')
                        agents = await get_agents()
                        for agent in agents:
                            await bot.send_message(agent, message.text)
                            await state.finish()

                    
    
            else:
                await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=get_keyboard('start'))


            

    async def callback(self, callback_query: types.CallbackQuery):
        await handle_callback(callback_query)

    





if __name__ == '__main__':
    BotMain(dp)
    executor.start_polling(dp, skip_updates=True)

